# require 'autotest/gnomenotify'
require('autotest/redgreen')
require('autotest/timestamp')

module Autotest::GnomeNotify

  # Time notification will be displayed before disappearing automatically
  EXPIRATION_IN_SECONDS = 5
  IMAGE_ROOT = "#{ENV['HOME']}/.autotest_images"

  class << self
    # Convenience method to send an error notification message
    #
    # [stock_icon]   Stock icon name of icon to display
    # [title]        Notification message title
    # [message]      Core message for the notification
    def self.notify(stock_icon, title, message)
      options = "-t #{EXPIRATION_IN_SECONDS * 2500} -i #{stock_icon}"
      system "notify-send #{options} '#{title}' '#{message}'"
    end

    Autotest.add_hook :ran_command do |autotest|
      filtered = autotest.results.grep(/\d+\s.*examples?/)
      output = filtered.empty? ? '' : filtered.last.slice(/(\d+)\s.*examples?,\s(\d+)\s.*failures?(?:,\s(\d+)\s.*pending)?/)
      
      if output =~ /(\d\d|[1-9])\sfailures?/
        notify "#{IMAGE_ROOT}/fail.png", "Tem alguma coisa errada, preste mais atenção.", "#{output}"
      elsif output =~ /pending/
        notify "#{IMAGE_ROOT}/pending.png", "Quase! Ainda falta resolver umas pendências.", "#{output}"
      elsif !output.empty?
        notify "#{IMAGE_ROOT}/pass.png", "Os testes passaram, vamos tomar uma coca-cola agora!", "#{output}"
      else
        notify "#{IMAGE_ROOT}/fail.png", "Erroooooooooooooo!!", "Problemas na execução do teste."
      end
    end  

  end

end

Autotest.add_hook :initialize do |at|
  %w{.svn .hg .git vendor}.each {|exception| at.add_exception(exception)}
end
